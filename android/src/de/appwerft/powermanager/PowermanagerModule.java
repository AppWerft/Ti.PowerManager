/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.powermanager;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;

import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Build;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.provider.Settings;

import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

@Kroll.module(name = "Powermanager", id = "de.appwerft.powermanager")
public class PowermanagerModule extends KrollModule {

	// Standard Debugging variables
	private static final String LCAT = "PowermanagerModule";
	private static final boolean DBG = TiConfig.LOGD;
	private Context ctx = TiApplication.getInstance().getApplicationContext();
	private PowerManager powerManager;
	private String packageName;
	// You can define constants with @Kroll.constant, for example:
	@Kroll.constant
	public static final int PARTIAL_WAKE_LOCK = PowerManager.PARTIAL_WAKE_LOCK;
	@SuppressWarnings("deprecation")
	@Kroll.constant
	public static final int FULL_WAKE_LOCK = PowerManager.FULL_WAKE_LOCK;
	@SuppressWarnings("deprecation")
	@Kroll.constant
	public static final int SCREEN_DIM_WAKE_LOCK = PowerManager.SCREEN_DIM_WAKE_LOCK;
	@SuppressWarnings("deprecation")
	@Kroll.constant
	public static final int SCREEN_BRIGHT_WAKE_LOCK = PowerManager.SCREEN_BRIGHT_WAKE_LOCK;

	public PowermanagerModule() {
		super();
		packageName = TiApplication.getInstance().getPackageName();
		powerManager = (PowerManager) ctx.getSystemService(Context.POWER_SERVICE);

	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");

		// put module init code that needs to run when the application is created
	}

	// Methods
	@Kroll.method
	public void requestPermission() {
		Intent intent = new Intent();

		if (powerManager.isIgnoringBatteryOptimizations(packageName))
			intent.setAction(Settings.ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS);
		else {
			intent.setAction(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);
			intent.setData(Uri.parse("package:" + packageName));
		}
		try {
			// some device doesn't has activity to handle this intent
			// so add try catch
			ctx.startActivity(intent);
		} catch (Exception e) {
			Log.e(LCAT, e.getLocalizedMessage());
		}

		powerManager = (PowerManager) getActivity().getSystemService(Context.POWER_SERVICE);
		WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "My Lock");

		// mediaPlayer.setWakeMode(ctx, PowerManager.PARTIAL_WAKE_LOCK);
	}

	@Kroll.method
	public boolean isIgnoringBatteryOptimizations() {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
			return powerManager.isIgnoringBatteryOptimizations(packageName);
		}
		return true;
	}

	@Kroll.method
	public boolean isDeviceIdleMode() {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
			return powerManager.isDeviceIdleMode();
		}
		return true;
	}

	@Kroll.method
	public boolean isInteractive() {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
			return powerManager.isInteractive();
		}
		return true;
	}

	@Kroll.method
	public boolean isPowerSaveMode() {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
			return powerManager.isPowerSaveMode();
		}
		return true;
	}

	@SuppressWarnings("deprecation")
	public boolean isScreenOn() {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
			return powerManager.isScreenOn();
		}
		return true;
	}

	public boolean isWakeLockLevelSupported(int level) {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
			return powerManager.isWakeLockLevelSupported(level);
		}
		return true;
	}

}
